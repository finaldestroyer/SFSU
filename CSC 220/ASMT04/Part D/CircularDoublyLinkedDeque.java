package assignment04PartD;public class CircularDoublyLinkedDeque<T> implements DequeInterface<T> {    private DoublyLinkedNode head;    CircularDoublyLinkedDeque() {        head = null;    }    private class DoublyLinkedNode {        T current = null;        DoublyLinkedNode back = null;        DoublyLinkedNode front = null;    } // end DoublyLinkedNode    @Override    public void addToFront(T newEntry) {        DoublyLinkedNode iter = head;        DoublyLinkedNode temp = new DoublyLinkedNode();        temp.current = newEntry;        if (head == null) {            head = temp;            return;        }        iter.front = temp;        temp.back = iter;        head = temp;    }    @Override    public void addToBack(T newEntry) {        DoublyLinkedNode temp = new DoublyLinkedNode();        temp.current = newEntry;        if (head == null) {            head = temp;        }        DoublyLinkedNode iter = head;        DoublyLinkedNode prev = null;        while (iter != null) {            prev = iter;            iter = iter.back;        }        prev.back = temp;        temp.front = prev;        iter = temp;    }    @Override    public T removeFront() {        if (head == null) {            return null;        }        DoublyLinkedNode temp = head;        head = temp.back;        head.front = null;        return temp.current;    }    @Override    public T removeBack() {        /*        DoublyLinkedNode iter = head;        DoublyLinkedNode prev = iter;        while(iter != null) {            prev = iter;            iter = iter.back;        }        prev.back = null;        return prev.current;        */        DoublyLinkedNode iter = head;        DoublyLinkedNode prev = iter;        if (head == null)            return null;        if (head.back == null) {            return null;        }        while (prev.back.back != null) {            prev = prev.back;        }        prev.back = null;        return prev.current;    }    @Override    public T getFront() {        DoublyLinkedNode temp = head;        return head.current;    }    @Override    public T getBack() {        DoublyLinkedNode temp = head;        while (temp.back != null)            temp = temp.back;        return temp.current;    }    @Override    public boolean isEmpty() {        if (head == null) {            return true;        }        return false;    }    @Override    public void clear() {        /*        DoublyLinkedNode iter = head;        DoublyLinkedNode prev;        while(iter != null){            prev = iter;            iter = iter.back;            prev = null;        }        */        head = null;    }} // end CircularDoublyLinkedDeque